// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RaffleCreated extends ethereum.Event {
  get params(): RaffleCreated__Params {
    return new RaffleCreated__Params(this);
  }
}

export class RaffleCreated__Params {
  _event: RaffleCreated;

  constructor(event: RaffleCreated) {
    this._event = event;
  }

  get raffleContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get createdBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get paymentToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RaffleFactory__getRafflesResultRaffleEntriesStruct extends ethereum.Tuple {
  get raffleContract(): Address {
    return this[0].toAddress();
  }

  get paymentToken(): Address {
    return this[1].toAddress();
  }

  get prizeTokens(): Array<Address> {
    return this[2].toAddressArray();
  }

  get linkBalance(): BigInt {
    return this[3].toBigInt();
  }

  get vrfRequestId(): BigInt {
    return this[4].toBigInt();
  }

  get name(): string {
    return this[5].toString();
  }

  get symbol(): string {
    return this[6].toString();
  }

  get totalSupply(): BigInt {
    return this[7].toBigInt();
  }

  get ticketPrice(): BigInt {
    return this[8].toBigInt();
  }

  get maxSupply(): BigInt {
    return this[9].toBigInt();
  }

  get startTime(): BigInt {
    return this[10].toBigInt();
  }

  get endTime(): BigInt {
    return this[11].toBigInt();
  }

  get createdAt(): BigInt {
    return this[12].toBigInt();
  }

  get adminFeeFraction(): i32 {
    return this[13].toI32();
  }

  get prizeSplits(): Array<i32> {
    return this[14].toI32Array();
  }

  get winners(): Array<RaffleFactory__getRafflesResultRaffleEntriesWinnersStruct> {
    return this[15].toTupleArray<RaffleFactory__getRafflesResultRaffleEntriesWinnersStruct>();
  }

  get feeCollectionWallet(): Address {
    return this[16].toAddress();
  }

  get paysOutRemainingPaymentTokens(): boolean {
    return this[17].toBoolean();
  }

  get saleActive(): boolean {
    return this[18].toBoolean();
  }

  get readyToPrepare(): boolean {
    return this[19].toBoolean();
  }

  get readyToPickWinners(): boolean {
    return this[20].toBoolean();
  }

  get hasWinners(): boolean {
    return this[21].toBoolean();
  }

  get isStopped(): boolean {
    return this[22].toBoolean();
  }
}

export class RaffleFactory__getRafflesResultRaffleEntriesWinnersStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get wallet(): Address {
    return this[1].toAddress();
  }
}

export class RaffleFactory extends ethereum.SmartContract {
  static bind(address: Address): RaffleFactory {
    return new RaffleFactory("RaffleFactory", address);
  }

  createRaffle(
    name: string,
    symbol: string,
    paymentToken: Address,
    feeCollectionWallet: Address,
    prizeTokens: Array<Address>,
    ticketPrice: BigInt,
    maxSupply: BigInt,
    startTime: BigInt,
    endTime: BigInt,
    adminFeeFraction: i32,
    prizeSplits: Array<i32>,
    shouldPayoutRemainingPaymentToken: boolean,
  ): Address {
    let result = super.call(
      "createRaffle",
      "createRaffle(string,string,address,address,address[],uint96,uint32,uint32,uint32,uint8,uint8[],bool):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromAddress(feeCollectionWallet),
        ethereum.Value.fromAddressArray(prizeTokens),
        ethereum.Value.fromUnsignedBigInt(ticketPrice),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(endTime),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(adminFeeFraction)),
        ethereum.Value.fromI32Array(prizeSplits),
        ethereum.Value.fromBoolean(shouldPayoutRemainingPaymentToken),
      ],
    );

    return result[0].toAddress();
  }

  try_createRaffle(
    name: string,
    symbol: string,
    paymentToken: Address,
    feeCollectionWallet: Address,
    prizeTokens: Array<Address>,
    ticketPrice: BigInt,
    maxSupply: BigInt,
    startTime: BigInt,
    endTime: BigInt,
    adminFeeFraction: i32,
    prizeSplits: Array<i32>,
    shouldPayoutRemainingPaymentToken: boolean,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createRaffle",
      "createRaffle(string,string,address,address,address[],uint96,uint32,uint32,uint32,uint8,uint8[],bool):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromAddress(feeCollectionWallet),
        ethereum.Value.fromAddressArray(prizeTokens),
        ethereum.Value.fromUnsignedBigInt(ticketPrice),
        ethereum.Value.fromUnsignedBigInt(maxSupply),
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(endTime),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(adminFeeFraction)),
        ethereum.Value.fromI32Array(prizeSplits),
        ethereum.Value.fromBoolean(shouldPayoutRemainingPaymentToken),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRaffles(): Array<RaffleFactory__getRafflesResultRaffleEntriesStruct> {
    let result = super.call(
      "getRaffles",
      "getRaffles():((address,address,address[],uint256,uint256,string,string,uint256,uint96,uint32,uint32,uint32,uint32,uint8,uint8[],(uint256,address)[],address,bool,bool,bool,bool,bool,bool)[])",
      [],
    );

    return result[0].toTupleArray<RaffleFactory__getRafflesResultRaffleEntriesStruct>();
  }

  try_getRaffles(): ethereum.CallResult<
    Array<RaffleFactory__getRafflesResultRaffleEntriesStruct>
  > {
    let result = super.tryCall(
      "getRaffles",
      "getRaffles():((address,address,address[],uint256,uint256,string,string,uint256,uint96,uint32,uint32,uint32,uint32,uint8,uint8[],(uint256,address)[],address,bool,bool,bool,bool,bool,bool)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<RaffleFactory__getRafflesResultRaffleEntriesStruct>(),
    );
  }

  linkAddress(): Address {
    let result = super.call("linkAddress", "linkAddress():(address)", []);

    return result[0].toAddress();
  }

  try_linkAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("linkAddress", "linkAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  raffles(param0: BigInt): Address {
    let result = super.call("raffles", "raffles(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_raffles(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("raffles", "raffles(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vrfAddress(): Address {
    let result = super.call("vrfAddress", "vrfAddress():(address)", []);

    return result[0].toAddress();
  }

  try_vrfAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("vrfAddress", "vrfAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _linkAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _vrfAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateRaffleCall extends ethereum.Call {
  get inputs(): CreateRaffleCall__Inputs {
    return new CreateRaffleCall__Inputs(this);
  }

  get outputs(): CreateRaffleCall__Outputs {
    return new CreateRaffleCall__Outputs(this);
  }
}

export class CreateRaffleCall__Inputs {
  _call: CreateRaffleCall;

  constructor(call: CreateRaffleCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get paymentToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get feeCollectionWallet(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get prizeTokens(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get ticketPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get adminFeeFraction(): i32 {
    return this._call.inputValues[9].value.toI32();
  }

  get prizeSplits(): Array<i32> {
    return this._call.inputValues[10].value.toI32Array();
  }

  get shouldPayoutRemainingPaymentToken(): boolean {
    return this._call.inputValues[11].value.toBoolean();
  }
}

export class CreateRaffleCall__Outputs {
  _call: CreateRaffleCall;

  constructor(call: CreateRaffleCall) {
    this._call = call;
  }

  get raffleAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class PickWinnersForRaffleCall extends ethereum.Call {
  get inputs(): PickWinnersForRaffleCall__Inputs {
    return new PickWinnersForRaffleCall__Inputs(this);
  }

  get outputs(): PickWinnersForRaffleCall__Outputs {
    return new PickWinnersForRaffleCall__Outputs(this);
  }
}

export class PickWinnersForRaffleCall__Inputs {
  _call: PickWinnersForRaffleCall;

  constructor(call: PickWinnersForRaffleCall) {
    this._call = call;
  }

  get raffle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PickWinnersForRaffleCall__Outputs {
  _call: PickWinnersForRaffleCall;

  constructor(call: PickWinnersForRaffleCall) {
    this._call = call;
  }
}

export class PreparePickWinnersForRaffleCall extends ethereum.Call {
  get inputs(): PreparePickWinnersForRaffleCall__Inputs {
    return new PreparePickWinnersForRaffleCall__Inputs(this);
  }

  get outputs(): PreparePickWinnersForRaffleCall__Outputs {
    return new PreparePickWinnersForRaffleCall__Outputs(this);
  }
}

export class PreparePickWinnersForRaffleCall__Inputs {
  _call: PreparePickWinnersForRaffleCall;

  constructor(call: PreparePickWinnersForRaffleCall) {
    this._call = call;
  }

  get raffle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get callbackGasLimit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get requestConfirmations(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class PreparePickWinnersForRaffleCall__Outputs {
  _call: PreparePickWinnersForRaffleCall;

  constructor(call: PreparePickWinnersForRaffleCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StopSaleForRaffleCall extends ethereum.Call {
  get inputs(): StopSaleForRaffleCall__Inputs {
    return new StopSaleForRaffleCall__Inputs(this);
  }

  get outputs(): StopSaleForRaffleCall__Outputs {
    return new StopSaleForRaffleCall__Outputs(this);
  }
}

export class StopSaleForRaffleCall__Inputs {
  _call: StopSaleForRaffleCall;

  constructor(call: StopSaleForRaffleCall) {
    this._call = call;
  }

  get raffle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class StopSaleForRaffleCall__Outputs {
  _call: StopSaleForRaffleCall;

  constructor(call: StopSaleForRaffleCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawLinkFromRaffleCall extends ethereum.Call {
  get inputs(): WithdrawLinkFromRaffleCall__Inputs {
    return new WithdrawLinkFromRaffleCall__Inputs(this);
  }

  get outputs(): WithdrawLinkFromRaffleCall__Outputs {
    return new WithdrawLinkFromRaffleCall__Outputs(this);
  }
}

export class WithdrawLinkFromRaffleCall__Inputs {
  _call: WithdrawLinkFromRaffleCall;

  constructor(call: WithdrawLinkFromRaffleCall) {
    this._call = call;
  }

  get raffle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawLinkFromRaffleCall__Outputs {
  _call: WithdrawLinkFromRaffleCall;

  constructor(call: WithdrawLinkFromRaffleCall) {
    this._call = call;
  }
}

export class WithdrawTokensFromRaffleCall extends ethereum.Call {
  get inputs(): WithdrawTokensFromRaffleCall__Inputs {
    return new WithdrawTokensFromRaffleCall__Inputs(this);
  }

  get outputs(): WithdrawTokensFromRaffleCall__Outputs {
    return new WithdrawTokensFromRaffleCall__Outputs(this);
  }
}

export class WithdrawTokensFromRaffleCall__Inputs {
  _call: WithdrawTokensFromRaffleCall;

  constructor(call: WithdrawTokensFromRaffleCall) {
    this._call = call;
  }

  get raffle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class WithdrawTokensFromRaffleCall__Outputs {
  _call: WithdrawTokensFromRaffleCall;

  constructor(call: WithdrawTokensFromRaffleCall) {
    this._call = call;
  }
}
